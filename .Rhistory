}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")}
)
print( "ok!")
write_csv2(iterated, 'iterated.csv' ,  na = '')
Sys.sleep(1)
gc()
}
### with the idea reduce the time require for a query I take a smaal segregation with less than 50000 observations.
SEGREGATION_EPS_CODE = '[Administradoras].[Codigo de Administradora]'
# iterated = ITERATIONS
for (i in 1:nrow(iterated)) {
EPS =as.character(iterated[i,1])
VAR_INTERES = as.character(iterated[i,2])
TYPE_USER =  as.character(iterated[i,3])
SQL  = " SELECT * FROM iterated WHERE
CASE WHEN EPS = '%s'  AND
VAR_OF_INTEREST = '%s'  AND
TYPE_OF_USER   = '%s'  THEN 1 ELSE  0 END = 0  "
iterated = sqldf::sqldf( sprintf(SQL, EPS,VAR_INTERES,TYPE_USER  ) )
mdx = query_cube_mdx(AXIS0 = AXIS0, AXIS1 = AXIS1, AXIS2 = AXIS2,
TYPE_USER= TYPE_USER,
SEGREGATION_VAR_INTERES=SEGREGATION_VAR_INTERES ,
VAR_INTERES=VAR_INTERES,
SEGREGATION_EPS_CODE=SEGREGATION_EPS_CODE  ,
EPS=EPS,
cube = from_olap_catalog )
print( "The query is ready!")
tryCatch( {
tempo = execue_query_mdx(mdx =mdx ,
connection_string = connection_string,
EPS=EPS,
VAR_INTERES=VAR_INTERES,
TYPE_USER=  TYPE_USER ,  olapCnn = olapCnn)
print(sprintf("The EPS with code: %s, var. of interes: %s, and of type user: %s had beed downloaded", EPS, VAR_INTERES, TYPE_USER ))
csv_name = paste0('tables_from_cube/',EPS, '_',VAR_INTERES, '_',TYPE_USER,'.csv' )
write_csv2(tempo, csv_name ,  na = '')
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")}
)
print( "ok!")
write_csv2(iterated, 'iterated.csv' ,  na = '')
Sys.sleep(1)
gc()
}
# iterated = ITERATIONS
for (i in 1:nrow(iterated)) {
EPS =as.character(iterated[i,1])
VAR_INTERES = as.character(iterated[i,2])
TYPE_USER =  as.character(iterated[i,3])
SQL  = " SELECT * FROM iterated WHERE
CASE WHEN EPS = '%s'  AND
VAR_OF_INTEREST = '%s'  AND
TYPE_OF_USER   = '%s'  THEN 1 ELSE  0 END = 0  "
iterated = sqldf::sqldf( sprintf(SQL, EPS,VAR_INTERES,TYPE_USER  ) )
mdx = query_cube_mdx(AXIS0 = AXIS0, AXIS1 = AXIS1, AXIS2 = AXIS2,
TYPE_USER= TYPE_USER,
SEGREGATION_VAR_INTERES=SEGREGATION_VAR_INTERES ,
VAR_INTERES=VAR_INTERES,
SEGREGATION_EPS_CODE=SEGREGATION_EPS_CODE  ,
EPS=EPS,
cube = from_olap_catalog )
print( "The query is ready!")
tryCatch( {
tempo = execue_query_mdx(mdx =mdx ,
connection_string = connection_string,
EPS=EPS,
VAR_INTERES=VAR_INTERES,
TYPE_USER=  TYPE_USER ,  olapCnn = olapCnn)
print(sprintf("The EPS with code: %s, var. of interes: %s, and of type user: %s had beed downloaded", EPS, VAR_INTERES, TYPE_USER ))
csv_name = paste0('tables_from_cube/',EPS, '_',VAR_INTERES, '_',TYPE_USER,'.csv' )
write_csv2(tempo, csv_name ,  na = '')
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")}
)
print( "ok!")
write_csv2(iterated, 'iterated.csv' ,  na = '')
Sys.sleep(1)
gc()
}
# iterated = ITERATIONS
for (i in 1:nrow(iterated)) {
EPS =as.character(iterated[i,1])
VAR_INTERES = as.character(iterated[i,2])
TYPE_USER =  as.character(iterated[i,3])
SQL  = " SELECT * FROM iterated WHERE
CASE WHEN EPS = '%s'  AND
VAR_OF_INTEREST = '%s'  AND
TYPE_OF_USER   = '%s'  THEN 1 ELSE  0 END = 0  "
iterated = sqldf::sqldf( sprintf(SQL, EPS,VAR_INTERES,TYPE_USER  ) )
mdx = query_cube_mdx(AXIS0 = AXIS0, AXIS1 = AXIS1, AXIS2 = AXIS2,
TYPE_USER= TYPE_USER,
SEGREGATION_VAR_INTERES=SEGREGATION_VAR_INTERES ,
VAR_INTERES=VAR_INTERES,
SEGREGATION_EPS_CODE=SEGREGATION_EPS_CODE  ,
EPS=EPS,
cube = from_olap_catalog )
print( "The query is ready!")
tryCatch( {
tempo = execue_query_mdx(mdx =mdx ,
connection_string = connection_string,
EPS=EPS,
VAR_INTERES=VAR_INTERES,
TYPE_USER=  TYPE_USER ,  olapCnn = olapCnn)
print(sprintf("The EPS with code: %s, var. of interes: %s, and of type user: %s had beed downloaded", EPS, VAR_INTERES, TYPE_USER ))
csv_name = paste0('tables_from_cube/',EPS, '_',VAR_INTERES, '_',TYPE_USER,'.csv' )
write_csv2(tempo, csv_name ,  na = '')
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")}
)
print( "ok!")
write_csv2(iterated, 'iterated.csv' ,  na = '')
Sys.sleep(1)
gc()
}
rm(list = ls())
packageList<-c("olapR", "foreign", "tidyverse", "haven","beepr", 'dplyr', 'readr')
for (i in 1:length(packageList) ) {
if(packageList[i] %in% rownames(installed.packages()) == FALSE) {
install.packages(packageList[i])
}
lapply(packageList[i], library, character.only = TRUE)
}
productos = data.frame()
path_ = "C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep/CU_Morbilidad_ASIS/"
setwd(path_)
files <- list.files(pattern = ".csv")
setwd("C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep/CU_Morbilidad_ASIS")
path_ ="C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep/CU_Morbilidad_ASIS"
setwd(path_)
files <- list.files(pattern = ".csv")
library(readr)
library(sqldf)
library(tidyverse)
library(dplyr)
productos = data.frame()
for (i in files){
path= paste0(path_, i)
print(path)
tempo <- read_delim(path, ";", escape_double = FALSE, locale = locale(decimal_mark = ","),
trim_ws = TRUE)
tempo <- sqldf::sqldf("SELECT * ,  substr(ltrim(CITY) , 0,6 ) DIVIPOLA FROM  tempo ")
productos<- rbind(tempo, productos )
}
productos = data.frame()
for (i in files){
path= paste0( i)
print(path)
tempo <- read_delim(path, ";", escape_double = FALSE, locale = locale(decimal_mark = ","),
trim_ws = TRUE)
tempo <- sqldf::sqldf("SELECT * ,  substr(ltrim(CITY) , 0,6 ) DIVIPOLA FROM  tempo ")
productos<- rbind(tempo, productos )
}
EPS_CODE <- read_delim("C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep/Code/BANREP/EPS CODE.csv",
";", escape_double = FALSE, trim_ws = TRUE)
unique(productos$EPS)
dim_eps = unique(productos$EPS)
dim_users = productos$TYPE_USER
dim_users = unique(productos$TYPE_USER)
dim_divipola = unique(productos$DIVIPOLA)
unique(productos$TYPE_USER)
unique(productos$VAR_INTERES)
dim_divipola = data.frame('DIVIPOLA' = unique(productos$DIVIPOLA))
dim_users = data.frame('TYPE_USER' = unique(productos$TYPE_USER))
dim_eps = data.frame('TYPE_USER' = unique(productos$EPS))
dim_year = data.frame('years' = unique(productos$YEAR))
dim_ciudad = data.frame('CITY' = unique(productos$CITY))
dim_causa = data.frame('CAUSA' = unique(productos$VAR_INTERES))
dim  = sqldf("
SELECT * FROM dim_divipola
LEFT JOIN dim_users ON 1=1
LEFT JOIN dim_eps ON 1=1
LEFT JOIN dim_year ON 1=1
LEFT JOIN dim_causa ON 1=1
")
View(dim_ciudad)
dim  = sqldf("
SELECT * FROM dim_divipola
-- LEFT JOIN dim_users ON 1=1
LEFT JOIN dim_eps ON 1=1
LEFT JOIN dim_year ON 1=1
LEFT JOIN dim_causa ON 1=1
")
dim  = sqldf(sprintf("
SELECT * FROM dim_divipola
-- LEFT JOIN dim_users ON 1=1
LEFT JOIN dim_eps ON 1=1
LEFT JOIN dim_year ON 1=1
LEFT JOIN dim_causa ON 1=1
where dim_causa = '%s'
"), dim_causa[1]  )
dim_causa[1]
View(dim_causa)
unique(productos$VAR_INTERES)[1]
dim  = sqldf(sprintf("
SELECT * FROM dim_divipola
-- LEFT JOIN dim_users ON 1=1
LEFT JOIN dim_eps ON 1=1
LEFT JOIN dim_year ON 1=1
-- LEFT JOIN dim_causa ON 1=1
where dim_causa = '%s'
"), unique(productos$VAR_INTERES)[1]  )
dim  = sqldf("
SELECT * FROM dim_divipola
-- LEFT JOIN dim_users ON 1=1
LEFT JOIN dim_eps ON 1=1
LEFT JOIN dim_year ON 1=1
-- LEFT JOIN dim_causa ON 1=1
--  where dim_causa = '%s'
")
View(dim)
dim_eps = data.frame('EPS_' = unique(productos$EPS))
dim  = sqldf("
SELECT * FROM dim_divipola
-- LEFT JOIN dim_users ON 1=1
LEFT JOIN dim_eps ON 1=1
LEFT JOIN dim_year ON 1=1
-- LEFT JOIN dim_causa ON 1=1
--  where dim_causa = '%s'
")
dim = sqldf::sqldf("
SELECT * FROM dim
inner join EPS_CODE
on EPS = EPS_
where DIVIPOLA IS NOT NULL
")
dim  = sqldf("
SELECT * FROM dim_divipola
-- LEFT JOIN dim_users ON 1=1
LEFT JOIN dim_eps ON 1=1
LEFT JOIN dim_year ON 1=1
-- LEFT JOIN dim_causa ON 1=1
--  where dim_causa = '%s'
")
View(EPS_CODE)
EPS_CODE <- read_delim("codigo_entidad_regimen.csv", ",", escape_double = FALSE, trim_ws = TRUE)
# Reading eps usefull
EPS_CODE <- read_delim("C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep/Code/BANREP/EPS CODE.csv",
";", escape_double = FALSE, trim_ws = TRUE)
EPS_CODE <- read_excel("C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep/Code/BANREP/diccionario_codigos_eps.xlsx",
sheet = "codigo_entidad_regimen")
packageList<-c("readxl", "readr", "tidyverse", "sqldf","beepr", 'dplyr', 'readr', 'devtools')
for (i in 1:length(packageList) ) {
if(packageList[i] %in% rownames(installed.packages()) == FALSE) {
install.packages(packageList[i])
}
lapply(packageList[i], library, character.only = TRUE)
}
EPS_CODE <- read_excel("C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep/Code/BANREP/diccionario_codigos_eps.xlsx",
sheet = "codigo_entidad_regimen")
dim  = sqldf("
SELECT * FROM dim_divipola
-- LEFT JOIN dim_users ON 1=1
LEFT JOIN dim_eps ON 1=1
LEFT JOIN dim_year ON 1=1
-- LEFT JOIN dim_causa ON 1=1
--  where dim_causa = '%s'
")
dim = sqldf::sqldf("
SELECT * FROM dim
inner join EPS_CODE
on codigo = EPS_
where DIVIPOLA IS NOT NULL
")
unique(productos$TYPE_USER)
unique(EPS_CODE$regimen)
EPS_CODE <- sqldf("
SELECT * FROM (
SELECT *,
CASE WHEN UPPER(REGIMEN) LIKE '%SBS%' THEN '2 - SUBSIDIADO'
WHEN UPPER(REGIMEN) LIKE '%CNT%' THEN '1 - CONTRIBUTIVO' ELSE NULL END AS NOM_REGIMEN
FROM EPS_CODE
)
WHERE NOM_REGIMEN IS NOT NULL
")
dim_divipola = data.frame('DIVIPOLA' = unique(productos$DIVIPOLA))
dim_users = data.frame('TYPE_USER' = unique(productos$TYPE_USER))
dim_eps = data.frame('EPS_' = unique(productos$EPS))
dim_year = data.frame('years' = unique(productos$YEAR))
dim_ciudad = data.frame('CITY' = unique(productos$CITY))
dim_causa = data.frame('CAUSA' = unique(productos$VAR_INTERES))
dim  = sqldf("
SELECT * FROM dim_divipola
-- LEFT JOIN dim_users ON 1=1
LEFT JOIN dim_eps ON 1=1
LEFT JOIN dim_year ON 1=1
-- LEFT JOIN dim_causa ON 1=1
--  where dim_causa = '%s'
")
dim_sbs = sqldf::sqldf("
SELECT * FROM dim
inner join EPS_CODE
on codigo = EPS_
where DIVIPOLA IS NOT NULL
AND
")
dim_sbs = sqldf::sqldf("
SELECT * FROM dim
inner join EPS_CODE
on codigo = EPS_
where DIVIPOLA IS NOT NULL
")
dim_sbs = sqldf::sqldf("
SELECT * FROM dim
inner join EPS_CODE
on codigo = EPS_
where DIVIPOLA IS NOT NULL
where  NOM_REGIMEN = '2 - SUBSIDIADO'
")
dim_sbs = sqldf::sqldf("
SELECT * FROM dim
inner join EPS_CODE
on codigo = EPS_
where DIVIPOLA IS NOT NULL
and  NOM_REGIMEN = '2 - SUBSIDIADO'
")
dim_cnt = sqldf::sqldf("
SELECT * FROM dim
inner join EPS_CODE
on codigo = EPS_
where DIVIPOLA IS NOT NULL
and  NOM_REGIMEN = '1 - CONTRIBUTIVO'
")
View(dim_cnt)
dim  = sqldf("
SELECT * FROM dim_divipola
-- LEFT JOIN dim_users ON 1=1
LEFT JOIN dim_eps ON 1=1
LEFT JOIN dim_year ON 1=1
-- LEFT JOIN dim_causa ON 1=1
--  where dim_causa = '%s'
")
dim_sbs = sqldf::sqldf("
SELECT * FROM dim
inner join EPS_CODE
on codigo = EPS_
where DIVIPOLA IS NOT NULL
-- and  NOM_REGIMEN = '2 - SUBSIDIADO'
")
dim_cnt = sqldf::sqldf("
SELECT * FROM dim
inner join EPS_CODE
on codigo = EPS_
where DIVIPOLA IS NOT NULL
-- and  NOM_REGIMEN = '1 - CONTRIBUTIVO'
")
VAR_INTERES = unique(productos$VAR_INTERES)
path_ ="C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep/CU_Morbilidad_ASIS"
for (i in unique(productos$VAR_INTERES)) {
print(i)
}
print(i)
colnames(dim_sbs)
head(productos)
print(i)
temp = subset(productos , productos$VAR_INTERES== i & productos$TYPE_USER == '2 - SUBSIDIADO'  )
temp = sqldf::sqldf("
SELECT * FROM dim_sbs A
left join temp B
on A.DIVIPOLA = B.DIVIPOLA and codigo = EPS and years = year
")
View(temp)
colnames(temp )
colnames(temp)['VALUE'] = gsub(i, pattern = ' ',replacement = '')
colnames(temp['VALUE'] )= gsub(i, pattern = ' ',replacement = '')
View(temp)
gsub(i, pattern = ' ',replacement = '')
gsub(i, pattern = ' ',replacement = '_')
sql = sprintf(  "
SELECT
A.DIVIPOLA, EPS_, years, entidad, codigo, regimen, NOM_REGIMEN,
VALUE as %s
FROM dim_sbs A
left join temp B
on A.DIVIPOLA = B.DIVIPOLA and codigo = EPS and years = year
" , gsub(i, pattern = ' ',replacement = '_') )
print(i)
temp = subset(productos , productos$VAR_INTERES== i & productos$TYPE_USER == '2 - SUBSIDIADO'  )
sql = sprintf(  "
SELECT
A.DIVIPOLA, EPS_, years, entidad, codigo, regimen, NOM_REGIMEN,
VALUE as %s
FROM dim_sbs A
left join temp B
on A.DIVIPOLA = B.DIVIPOLA and codigo = EPS and years = year
" , gsub(i, pattern = ' ',replacement = '_') )
temp = sqldf::sqldf(sql)
##################################
dim_sbs_ = dim_sbs
##################################
dim_sbs_ = dim_sbs
for (i in unique(productos$VAR_INTERES)) {
print(i)
temp = subset(productos , productos$VAR_INTERES== i & productos$TYPE_USER == '2 - SUBSIDIADO'  )
SQL = sprintf(  "
SELECT
A.*,
VALUE as %s
FROM dim_sbs_ A
left join temp B
on A.DIVIPOLA = B.DIVIPOLA and codigo = EPS and years = year
" , gsub(i, pattern = ' ',replacement = '_') )
dim_sbs_ = sqldf::sqldf(SQL)
}
View(dim_sbs_)
dim_sbs
View(dim_sbs)
head(productos)
print(i)
temp = subset(productos , productos$VAR_INTERES== i & productos$TYPE_USER == '2 - SUBSIDIADO'  )
SQL = sprintf(  "
SELECT
A.*,
VALUE as %s
FROM dim_sbs_ A
left join temp B
on A.DIVIPOLA = B.DIVIPOLA and codigo = EPS and years = year AND TYPE_USER = NOM_REGIMEN
" , gsub(i, pattern = ' ',replacement = '_') )
##################################
dim_sbs_ = dim_sbs
print(i)
temp = subset(productos , productos$VAR_INTERES== i & productos$TYPE_USER == '2 - SUBSIDIADO'  )
SQL = sprintf(  "
SELECT
A.*,
VALUE as %s
FROM dim_sbs_ A
left join temp B
on A.DIVIPOLA = B.DIVIPOLA and codigo = EPS and years = year AND TYPE_USER = NOM_REGIMEN
" , gsub(i, pattern = ' ',replacement = '_') )
dim_sbs_ = sqldf::sqldf(SQL)
View(dim_sbs_)
dim_sbs = sqldf::sqldf("
SELECT * FROM dim
inner join EPS_CODE
on codigo = EPS_
where DIVIPOLA IS NOT NULL
and  NOM_REGIMEN = '2 - SUBSIDIADO'
")
dim_cnt = sqldf::sqldf("
SELECT * FROM dim
inner join EPS_CODE
on codigo = EPS_
where DIVIPOLA IS NOT NULL
and  NOM_REGIMEN = '1 - CONTRIBUTIVO'
")
colnames(dim_sbs)
head(productos)
##################################
dim_sbs_ = dim_sbs
for (i in unique(productos$VAR_INTERES)) {
print(i)
temp = subset(productos , productos$VAR_INTERES== i & productos$TYPE_USER == '2 - SUBSIDIADO'  )
SQL = sprintf(  "
SELECT
A.*,
VALUE as %s
FROM dim_sbs_ A
left join temp B
on A.DIVIPOLA = B.DIVIPOLA and codigo = EPS and years = year AND TYPE_USER = NOM_REGIMEN
" , gsub(i, pattern = ' ',replacement = '_') )
dim_sbs_ = sqldf::sqldf(SQL)
}
View(dim_sbs_)
##################################
dim_cnt_ = dim_cnt
print(i)
temp = subset(productos , productos$VAR_INTERES== i & productos$TYPE_USER == '1 - CONTRIBUTIVO'  )
SQL = sprintf(  "
SELECT
A.*,
VALUE as %s
FROM dim_cnt_ A
left join temp B
on A.DIVIPOLA = B.DIVIPOLA and codigo = EPS and years = year AND TYPE_USER = NOM_REGIMEN
" , gsub(i, pattern = ' ',replacement = '_') )
dim_cnt_ = sqldf::sqldf(SQL)
View(dim_cnt_)
indices = unique(productos$VAR_INTERES)
##################################
dim_sbs_ = dim_sbs
indices = unique(productos$VAR_INTERES)
for (i in indices  ) {
print(i)
temp = subset(productos , productos$VAR_INTERES== i & productos$TYPE_USER == '2 - SUBSIDIADO'  )
SQL = sprintf(  "
SELECT
A.*,
VALUE as %s
FROM dim_sbs_ A
left join temp B
on A.DIVIPOLA = B.DIVIPOLA and codigo = EPS and years = year AND TYPE_USER = NOM_REGIMEN
" , gsub(i, pattern = ' ',replacement = '_') )
dim_sbs_ = sqldf::sqldf(SQL)
}
##################################
dim_cnt_ = dim_cnt
for (i in  indices   ) {
print(i)
temp = subset(productos , productos$VAR_INTERES== i & productos$TYPE_USER == '1 - CONTRIBUTIVO'  )
SQL = sprintf(  "
SELECT
A.*,
VALUE as %s
FROM dim_cnt_ A
left join temp B
on A.DIVIPOLA = B.DIVIPOLA and codigo = EPS and years = year AND TYPE_USER = NOM_REGIMEN
" , gsub(i, pattern = ' ',replacement = '_') )
dim_cnt_ = sqldf::sqldf(SQL)
}
index_cu_morbilidad_asis = rbind(dim_cnt_,dim_sbs_ )
View(index_cu_morbilidad_asis)
getwd()
setwd("C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep")
write.csv2("index_cu_morbilidad_asis.csv", index_cu_morbilidad_asis)
write.csv2(index_cu_morbilidad_asis ,"index_cu_morbilidad_asis.csv")
