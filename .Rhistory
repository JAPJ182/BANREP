LEFT JOIN  OPOR_MEDICINA_GENERAL D
ON D.ANO_CORTE =  YEARS
AND NOM_EPS = D.NOMBRE_EPS_
-----------------------------
LEFT JOIN  OPOR_ODONT_GENERAL E
ON E.ANO_CORTE =  YEARS
AND NOM_EPS = E.NOMBRE_EPS_
")
index_table_nal = index_table_nal[,-c(7,8,12,13,16,17,19,20,22,23)]
#
index_table_nal$AFILIADOS_X_1000 = index_table_nal$AFILIADOS/1000
na_by_cols(index_table_nal)
# frac_nulls_eps(df = index_table_nal, column_name = 'NOM_EPS')
cols_number = c(3:6) #  ,9,10
# PCA
if(1==1){
# table_ <- subset(index_table_nal, index_table_nal$years==2022 )
# table_ <- table_wo_na (base = table_, cols_number = cols_number )
table_ <- table_wo_na (base = index_table_nal, cols_number = cols_number )
print('   ')
print(  data.frame( colnames(table_ ) )      )
print('   ')
print( paste0('filas ' , nrow((table_ ) ))  )
pca_eps <- prcomp(table_ ,center = F,  scale. = T,  rank. =1)
summary(pca_eps)
}
if (1=1){
if (1==1){
index_table_nal = sqldf::sqldf("
SELECT * FROM  index_cu_morbilidad_asis A
-----------------------------
LEFT JOIN index_alto_costo_subsidiado B
ON  year =  years
AND NOMBRE_EPS = NOM_EPS
-----------------------------
LEFT JOIN (
SELECT EPS AS NOM, ANIO AS ANIO_1 ,
SUM(AFILIADOS_X_1000) AS AFILIADOS_X_1000,
SUM(TUTELAS) AS TUTELAS
FROM index_tutelas_eps
GROUP BY 1,2
) A
ON NOM_EPS = NOM
AND ANIO_1 =  YEARS
-----------------------------
LEFT JOIN  (
SELECT NOM_EPS NOM_1, VARIABLE ANIO_2,
SUM(VALUE) AS AFILIADOS
FROM afiliados
GROUP BY 1,2
) C
ON NOM_EPS = NOM_1
AND ANIO_2 =  YEARS
-----------------------------
LEFT JOIN  OPOR_MEDICINA_GENERAL D
ON D.ANO_CORTE =  YEARS
AND NOM_EPS = D.NOMBRE_EPS_
-----------------------------
LEFT JOIN  OPOR_ODONT_GENERAL E
ON E.ANO_CORTE =  YEARS
AND NOM_EPS = E.NOMBRE_EPS_
")
index_table_nal = index_table_nal[,-c(7,8,12,13,16,17,19,20,22,23)]
#
index_table_nal$AFILIADOS_X_1000 = index_table_nal$AFILIADOS/1000
na_by_cols(index_table_nal)
# frac_nulls_eps(df = index_table_nal, column_name = 'NOM_EPS')
}
cols_number = c(3:6) #  ,9,10
# PCA
if(1==1){
# table_ <- subset(index_table_nal, index_table_nal$years==2022 )
# table_ <- table_wo_na (base = table_, cols_number = cols_number )
table_ <- table_wo_na (base = index_table_nal, cols_number = cols_number )
print('---------------------------------------------')
print(  data.frame( colnames(table_ ) )      )
print('---------------------------------------------')
print( paste0('filas ' , nrow((table_ ) ))  )
pca_eps <- prcomp(table_ ,center = F,  scale. = T,  rank. =1)
summary(pca_eps)
}
# PCA
if(1==1){
# table_ <- subset(index_table_nal, index_table_nal$years==2022 )
# table_ <- table_wo_na (base = table_, cols_number = cols_number )
table_ <- table_wo_na (base = index_table_nal, cols_number = cols_number )
print('---------------------------------------------')
print(  data.frame( colnames(table_ ) )      )
print('---------------------------------------------')
print( paste0('filas ' , nrow((table_ ) ))  )
print('---------------------------------------------')
pca_eps <- prcomp(table_ ,center = F,  scale. = T,  rank. =1)
summary(pca_eps)
}
# PCA
if(1==1){
# table_ <- subset(index_table_nal, index_table_nal$years==2022 )
# table_ <- table_wo_na (base = table_, cols_number = cols_number )
table_ <- table_wo_na (base = index_table_nal, cols_number = cols_number )
print('---------------------------------------------')
print(  data.frame( colnames(table_ ) )      )
print('---------------------------------------------')
print( paste0('filas ' , nrow((table_ ) ))  )
print('---------------------------------------------')
pca_eps <- prcomp(table_ ,center = F,  scale. = T,  rank. =1)
summary(pca_eps)
print('---------------------------------------------')
}
# PCA
if(1==1){
# table_ <- subset(index_table_nal, index_table_nal$years==2022 )
# table_ <- table_wo_na (base = table_, cols_number = cols_number )
table_ <- table_wo_na (base = index_table_nal, cols_number = cols_number )
print('---------------------------------------------')
print(  data.frame( colnames(table_ ) )      )
print('---------------------------------------------')
print( paste0('filas ' , nrow((table_ ) ))  )
print('---------------------------------------------')
pca_eps <- prcomp(table_ ,center = F,  scale. = T,  rank. =1)
print('---------------------------------------------')
summary(pca_eps)
}
index_table_nal = cbind(index_table_nal , predict(pca_eps, index_table_nal) )
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial'))
table_ <- index_table_nal
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial'))
model  = (lm(QUEBRADA ~ log(PC1) , data = table_ ))
#Logict
if(1==1){
table_ <- index_table_nal
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
print('---------------------------------------------')
summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial'))
print('---------------------------------------------')
summary(lm(QUEBRADA ~ log(PC1) , data = table_ ))
}
#Logict
if(1==1){
table_ <- index_table_nal
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
print('---------------------------------------------')
summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial'))
print('---------------------------------------------')
summary(lm(QUEBRADA ~  (PC1) , data = table_ ))
}
print(summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial')))
#Logict
if(1==1){
table_ <- index_table_nal
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
print('---------------------------------------------')
print(summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial')))
print('---------------------------------------------')
summary(lm(QUEBRADA ~  (PC1) , data = table_ ))
}
print(summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial'))['Coefficients'])
A= summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial'))
View(A)
A[["coefficients"]]
#Logict
if(1==1){
table_ <- index_table_nal
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
print('---------------------------------------------')
print(summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial'))[["coefficients"]] )
print('---------------------------------------------')
summary(lm(QUEBRADA ~  (PC1) , data = table_ )[["coefficients"]]  )
}
#Logict
if(1==1){
table_ <- index_table_nal
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
print('---------------------------------------------')
print(summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial'))[["coefficients"]] )
print('---------------------------------------------')
print( summary(lm(QUEBRADA ~  (PC1) , data = table_ )[["coefficients"]]  )  )
}
#Logict
if(1==1){
table_ <- index_table_nal
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
print('---------------------------------------------')
print(summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial'))[["coefficients"]] )
print('---------------------------------------------')
print( summary(lm(QUEBRADA ~  (PC1) , data = table_ )  )  )
}
A= summary(lm(QUEBRADA ~  (PC1) , data = table_ )  )
View(A)
A[["coefficients"]]
#Logict
if(1==1){
table_ <- index_table_nal
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
print('---------------------------------------------')
print(summary(glm(QUEBRADA ~ PC1 , data = table_, family = 'binomial'))[["coefficients"]] )
print('---------------------------------------------')
print( summary(lm(QUEBRADA ~  (PC1) , data = table_ )  )[["coefficients"]]  )
}
#Logict
if(1==1){
table_ <- index_table_nal
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
print('---------------------------------------------')
print(summary(glm(QUEBRADA ~ PC1 +PC1^2 , data = table_, family = 'binomial'))[["coefficients"]] )
print('---------------------------------------------')
print( summary(lm(QUEBRADA ~  (PC1)+PC1^2 , data = table_ )  )[["coefficients"]]  )
}
summary(glm(QUEBRADA ~ PC1 +PC1^2 , data = table_, family = 'binomial'))
#Logict
if(1==1){
table_ <- index_table_nal
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
print('---------------------------------------------')
print(summary(glm(QUEBRADA ~ PC1 + I(PC1^2) , data = table_, family = 'binomial'))[["coefficients"]] )
print('---------------------------------------------')
print( summary(lm(QUEBRADA ~  (PC1) + I(PC1^2) , data = table_ )  )[["coefficients"]]  )
}
View(A)
summary(glm(QUEBRADA ~ PC1 + I(PC1^2) , data = table_, family = 'binomial'))
lm(QUEBRADA ~  (PC1) + I(PC1^2) , data = table_ )
summary(lm(QUEBRADA ~  (PC1) + I(PC1^2) , data = table_ )  )
summary(lm(QUEBRADA ~  (PC1)  , data = table_ )  )
summary(lm(QUEBRADA ~  (PC1) + I(PC1^3) , data = table_ )  )
summary(lm(QUEBRADA ~  (PC1) + I(PC1^2) + I(PC1^3) , data = table_ )  )
summary(lm(QUEBRADA ~  (PC1) + I(PC1^2) , data = table_ )  )
View(A)
A[["residuals"]]
summary(lm(QUEBRADA ~  (PC1) + I(PC1^2) , data = table_ )  )[["residuals"]]
table_$res  =   summary(lm(QUEBRADA ~  (PC1) + I(PC1^2) , data = table_ )  )[["residuals"]]
#Logict
if(1==1){
table_ <- index_table_nal
# table_ <- table_wo_na (base = table_, cols_number =  c(4,5,8,9 ,7,11,21 )  )
print('---------------------------------------------')
print(summary(glm(QUEBRADA ~ PC1 + I(PC1^2) , data = table_, family = 'binomial'))[["coefficients"]] )
print('---------------------------------------------')
print( summary(lm(QUEBRADA ~  (PC1) + I(PC1^2) , data = table_ )  )[["coefficients"]]  )
}
index_cu_morbilidad_asis   = cbind(index_cu_morbilidad_asis , predict(pca_eps, index_cu_morbilidad_asis) )
View(index_cu_morbilidad_asis)
#
A = index_cu_morbilidad_asis %>% subset( NOM_EPS == 'EPS  FAMISANAR  LTDA')
View(cu_morbilidad_asis)
SQL = "
SELECT CASE WHEN years = 2022 THEN %s/7
WHEN years  != 2022 THEN   %s/12
ELSE END AS %s
"
SQL = "
SELECT CASE WHEN years = 2022 THEN %s/7
WHEN years  != 2022 THEN   %s/12
ELSE END AS %s FROM %s
"
VARIABLE = 'A'
TABLA = 'AS'
sprintf(SQL, VARIABLE, VARIABLE, VARIABLE, TABLA )
#
#         ITERATIONS = rbind(TEMPO, ITERATIONS)
#       }
#
#     }
#
#   }
#   write.csv2(ITERATIONS, "ITERATIONS.csv", row.names = F)
# }
correction_morbilidad <- function(TABLA , VARIABLE ){
SQL = "
SELECT CASE WHEN years = 2022 THEN %s/7
WHEN years  != 2022 THEN   %s/12
ELSE END AS %s FROM %s
"
return( sqldf(sprintf(SQL, VARIABLE, VARIABLE, VARIABLE, TABLA )) )
}
correction_morbilidad(TABLA = 'cu_morbilidad_asis' , VARIABLE  =  "Signos_y_sintomas_mal_definidos")
#
#         ITERATIONS = rbind(TEMPO, ITERATIONS)
#       }
#
#     }
#
#   }
#   write.csv2(ITERATIONS, "ITERATIONS.csv", row.names = F)
# }
correction_morbilidad <- function(TABLA , VARIABLE ){
SQL = "
SELECT CASE WHEN years = 2022 THEN %s/7
WHEN years  != 2022 THEN   %s/12
ELSE null END AS %s FROM %s
"
return( sqldf(sprintf(SQL, VARIABLE, VARIABLE, VARIABLE, TABLA )) )
}
correction_morbilidad <- function(TABLA , VARIABLE ){
SQL = "
SELECT CASE WHEN years = 2022 THEN %s/7
WHEN years  != 2022 THEN   %s/12
ELSE END AS %s FROM %s
"
return( sqldf(sprintf(SQL, VARIABLE, VARIABLE, VARIABLE, TABLA )) )
}
#
#         ITERATIONS = rbind(TEMPO, ITERATIONS)
#       }
#
#     }
#
#   }
#   write.csv2(ITERATIONS, "ITERATIONS.csv", row.names = F)
# }
correction_morbilidad <- function(TABLA , VARIABLE ){
SQL = "
SELECT CASE WHEN years = 2022 THEN %s/7
WHEN years  != 2022 THEN   %s/12
ELSE null END AS %s FROM %s
"
return( sqldf(sprintf(SQL, VARIABLE, VARIABLE, VARIABLE, TABLA )) )
}
correction_morbilidad(TABLA = 'cu_morbilidad_asis' , VARIABLE  =  "Signos_y_sintomas_mal_definidos")
# ### with the idea reduce the time require for a query I take a smaal segregation with less than 50000 observations.
SEGREGATION_EPS_CODE = '[Administradoras].[Codigo de Administradora]'
EPS_CODE = '[Administradoras].[Codigo de Administradora]'
SEGREGATION_VAR_INTERES = '[Causas de Morbilidad].[Gran Causa]'
source("C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep/Code/BANREP/functions.R")
# #####################
if(1==1){
### SET THE GRADE OF INTEREST
CAUSA = c('Condiciones transmisibles y nutricionales'
, 'Enfermedades no transmisibles'	, 'Lesiones'	,'Signos y sintomas mal definidos'
)
TIPO_USUARIO <- c('1 - CONTRIBUTIVO'	,'2 - SUBSIDIADO'
, '3 - VINCULADO'	,'4 - PARTICULAR'	,'5 - OTRO'	, '6 - DESPLAZADO CON AFILIACIÓN A RÉGIMEN CONTRIBUTIVO'	,
'7 - DESPLAZADO CON AFILIACIÓN A RÉGIMEN SUBSIDIADO'	,'8 - DESPLAZADO NO ASEGURADO O VINCULADO'
) # [Tipo Usuario].[Tipo Usuario].&[1 - CONTRIBUTIVO]
# taking the list of the entire eps
EPS_CODE <- read_delim("codigo_entidad_regimen.csv", ",", escape_double = FALSE, trim_ws = TRUE)
connection_string = cnnstr_rips
eapb_list <- EPS_CODE[['codigo']] #[2:10]
from_olap_catalog <- 'CU - Morbilidad_ASIS'
################################# requried data
### with the idea reduce the time require for a query I take a smaal segregation with less than 50000 observations.
SEGREGATION_EPS_CODE = '[Administradoras].[Codigo de Administradora]'
EPS_CODE = '[Administradoras].[Codigo de Administradora]'
SEGREGATION_VAR_INTERES = '[Causas de Morbilidad].[Gran Causa]'
### Mandatory variables to get observations a municipalities's level.
AXIS0 <- '[Measures].[ValorIndicador]'
AXIS1 <- '[Tiempo].[Año - Semestre - Trimestre - Mes].[Año], '
AXIS2 <- '[Municipio Residencia - RIPS].[Municipio]'
ITERATIONS = data.frame()
for (k  in 1:length(eapb_list )  ) {
# k=1
EPS = as.character(eapb_list[[k]] )
print(sprintf("The information for the EPS with code: %s will be downloaded", EPS))
for (l in CAUSA) {
VAR_INTERES <-  l
for (m in TIPO_USUARIO) {
print(sprintf("The EPS with code: %s, var. of interes: %s, and of type user: %s had beed downloaded", EPS, VAR_INTERES, m ))
TEMPO = data.frame('EPS' = EPS, 'VAR_OF_INTEREST' = VAR_INTERES, 'TYPE_OF_USER' = m )
ITERATIONS = rbind(TEMPO, ITERATIONS)
}
# write.csv2(ITERATIONS, "ITERATIONS.csv", row.names = F)
}
EPS_CODE read_excel(paste0(path_input, "diccionario_codigos_eps.xlsx" ) ) #<- read_delim("codigo_entidad_regimen.csv", ",", escape_double = FALSE, trim_ws = TRUE)
EPS_CODE <-  read_excel(paste0(path_input, "diccionario_codigos_eps.xlsx" ) ) #<- read_delim("codigo_entidad_regimen.csv", ",", escape_double = FALSE, trim_ws = TRUE)
View(EPS_CODE)
# #####################
if(1==1){
### SET THE GRADE OF INTEREST
CAUSA = c('Condiciones transmisibles y nutricionales'
, 'Enfermedades no transmisibles'	, 'Lesiones'	,'Signos y sintomas mal definidos'
)
TIPO_USUARIO <- c('1 - CONTRIBUTIVO'	,'2 - SUBSIDIADO'
, '3 - VINCULADO'	,'4 - PARTICULAR'	,'5 - OTRO'	, '6 - DESPLAZADO CON AFILIACIÓN A RÉGIMEN CONTRIBUTIVO'	,
'7 - DESPLAZADO CON AFILIACIÓN A RÉGIMEN SUBSIDIADO'	,'8 - DESPLAZADO NO ASEGURADO O VINCULADO'
) # [Tipo Usuario].[Tipo Usuario].&[1 - CONTRIBUTIVO]
# taking the list of the entire eps
EPS_CODE <-  read_excel(paste0(path_input, "diccionario_codigos_eps.xlsx" ) ) #<- read_delim("codigo_entidad_regimen.csv", ",", escape_double = FALSE, trim_ws = TRUE)
connection_string = cnnstr_rips
eapb_list <- EPS_CODE[['codigo']] #[2:10]
from_olap_catalog <- 'CU - Morbilidad_ASIS'
################################# requried data
### with the idea reduce the time require for a query I take a smaal segregation with less than 50000 observations.
SEGREGATION_EPS_CODE = '[Administradoras].[Codigo de Administradora]'
EPS_CODE = '[Administradoras].[Codigo de Administradora]'
SEGREGATION_VAR_INTERES = '[Causas de Morbilidad].[Gran Causa]'
### Mandatory variables to get observations a municipalities's level.
AXIS0 <- '[Measures].[ValorIndicador]'
AXIS1 <- '[Tiempo].[Año - Semestre - Trimestre - Mes].[Año], '
AXIS2 <- '[Municipio Residencia - RIPS].[Municipio]'
ITERATIONS = data.frame()
for (k  in 1:length(eapb_list )  ) {
# k=1
EPS = as.character(eapb_list[[k]] )
print(sprintf("The information for the EPS with code: %s will be downloaded", EPS))
for (l in CAUSA) {
VAR_INTERES <-  l
for (m in TIPO_USUARIO) {
print(sprintf("The EPS with code: %s, var. of interes: %s, and of type user: %s had beed downloaded", EPS, VAR_INTERES, m ))
TEMPO = data.frame('EPS' = EPS, 'VAR_OF_INTEREST' = VAR_INTERES, 'TYPE_OF_USER' = m )
ITERATIONS = rbind(TEMPO, ITERATIONS)
}
# write.csv2(ITERATIONS, "ITERATIONS.csv", row.names = F)
}
source("C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep/Code/BANREP/credentials.R")
# VAR_INTERES = 'Condiciones transmisibles y nutricionales' ### Looped variable
# EPS = "RES014"   ### Looped variable
# TYPE_USER = '1 - CONTRIBUTIVO'  ### Looped variable
source("C:/Users/USER/OneDrive - Pontificia Universidad Javeriana/02_UPJ 2020/Semestre 5/banrep/Code/BANREP/credentials.R")
### SET THE GRADE OF INTEREST
CAUSA = c('Condiciones transmisibles y nutricionales'
, 'Enfermedades no transmisibles'	, 'Lesiones'	,'Signos y sintomas mal definidos'
)
TIPO_USUARIO <- c('1 - CONTRIBUTIVO'	,'2 - SUBSIDIADO'
, '3 - VINCULADO'	,'4 - PARTICULAR'	,'5 - OTRO'	, '6 - DESPLAZADO CON AFILIACIÓN A RÉGIMEN CONTRIBUTIVO'	,
'7 - DESPLAZADO CON AFILIACIÓN A RÉGIMEN SUBSIDIADO'	,'8 - DESPLAZADO NO ASEGURADO O VINCULADO'
) # [Tipo Usuario].[Tipo Usuario].&[1 - CONTRIBUTIVO]
EPS_CODE <-  read_excel(paste0(path_input, "diccionario_codigos_eps.xlsx" ) ) #<- read_delim("codigo_entidad_regimen.csv", ",", escape_double = FALSE, trim_ws = TRUE)
connection_string = cnnstr_rips
eapb_list <- EPS_CODE[['codigo']] #[2:10]
from_olap_catalog <- 'CU - Morbilidad_ASIS'
### with the idea reduce the time require for a query I take a smaal segregation with less than 50000 observations.
SEGREGATION_EPS_CODE = '[Administradoras].[Codigo de Administradora]'
EPS_CODE = '[Administradoras].[Codigo de Administradora]'
SEGREGATION_VAR_INTERES = '[Causas de Morbilidad].[Gran Causa]'
### Mandatory variables to get observations a municipalities's level.
AXIS0 <- '[Measures].[ValorIndicador]'
AXIS1 <- '[Tiempo].[Año - Semestre - Trimestre - Mes].[All], '
AXIS2 <- '[Municipio Residencia - RIPS].[Municipio]'
ITERATIONS = data.frame()
for (k  in 1:length(eapb_list )  ) {
# k=1
EPS = as.character(eapb_list[[k]] )
print(sprintf("The information for the EPS with code: %s will be downloaded", EPS))
for (l in CAUSA) {
VAR_INTERES <-  l
for (m in TIPO_USUARIO) {
print(sprintf("The EPS with code: %s, var. of interes: %s, and of type user: %s had beed downloaded", EPS, VAR_INTERES, m ))
TEMPO = data.frame('EPS' = EPS, 'VAR_OF_INTEREST' = VAR_INTERES, 'TYPE_OF_USER' = m )
ITERATIONS = rbind(TEMPO, ITERATIONS)
}
View(ITERATIONS)
TIPO_USUARIO <- c('1 - CONTRIBUTIVO'	,'2 - SUBSIDIADO'
# , '3 - VINCULADO'	,'4 - PARTICULAR'	,'5 - OTRO'	, '6 - DESPLAZADO CON AFILIACIÓN A RÉGIMEN CONTRIBUTIVO'	,
# '7 - DESPLAZADO CON AFILIACIÓN A RÉGIMEN SUBSIDIADO'	,'8 - DESPLAZADO NO ASEGURADO O VINCULADO'
) # [Tipo Usuario].[Tipo Usuario].&[1 - CONTRIBUTIVO]
EPS_CODE <-  read_excel(paste0(path_input, "diccionario_codigos_eps.xlsx" ) ) #<- read_delim("codigo_entidad_regimen.csv", ",", escape_double = FALSE, trim_ws = TRUE)
connection_string = cnnstr_rips
eapb_list <- EPS_CODE[['codigo']] #[2:10]
from_olap_catalog <- 'CU - Morbilidad_ASIS'
### with the idea reduce the time require for a query I take a smaal segregation with less than 50000 observations.
SEGREGATION_EPS_CODE = '[Administradoras].[Codigo de Administradora]'
EPS_CODE = '[Administradoras].[Codigo de Administradora]'
SEGREGATION_VAR_INTERES = '[Causas de Morbilidad].[Gran Causa]'
### Mandatory variables to get observations a municipalities's level.
AXIS0 <- '[Measures].[ValorIndicador]'
AXIS1 <- '[Tiempo].[Año - Semestre - Trimestre - Mes].[All], '
AXIS2 <- '[Municipio Residencia - RIPS].[Municipio]'
ITERATIONS = data.frame()
for (k  in 1:length(eapb_list )  ) {
# k=1
EPS = as.character(eapb_list[[k]] )
print(sprintf("The information for the EPS with code: %s will be downloaded", EPS))
for (l in CAUSA) {
VAR_INTERES <-  l
for (m in TIPO_USUARIO) {
print(sprintf("The EPS with code: %s, var. of interes: %s, and of type user: %s had beed downloaded", EPS, VAR_INTERES, m ))
TEMPO = data.frame('EPS' = EPS, 'VAR_OF_INTEREST' = VAR_INTERES, 'TYPE_OF_USER' = m )
ITERATIONS = rbind(TEMPO, ITERATIONS)
}
write.csv2(ITERATIONS, "ITERATIONS.csv", row.names = F)
#####################
# ITERATIONS <- read_delim("ITERATIONS.csv",
#                        ";", escape_double = FALSE, locale = locale(encoding = "ISO-8859-1"),
#                        trim_ws = TRUE)
iterated = ITERATIONS
### with the idea reduce the time require for a query I take a smaal segregation with less than 50000 observations.
SEGREGATION_EPS_CODE = '[Administradoras].[Codigo de Administradora]'
EPS_CODE = '[Administradoras].[Codigo de Administradora]'
SEGREGATION_VAR_INTERES = '[Causas de Morbilidad].[Gran Causa]'
### Mandatory variables to get observations a municipalities's level.
AXIS0 <- '[Measures].[ValorIndicador]'
AXIS1 <- '[Tiempo].[Año - Semestre - Trimestre - Mes].[All]'
AXIS2 <- '[Municipio Residencia - RIPS].[Municipio]'
connection_string = cnnstr_rips
olapCnn<-olapR::OlapConnection(connection_string)
library(olapR)
cnnstr_rips<-"Provider=MSOLAP;Data Source=cubos.sispro.gov.co;Password=u4_gu41n14;
Persist Security Info=True;
User ID=sispro.local\\UA_Guainia;
Initial Catalog=SGD_ReportesRIPS;
Data Source=cubos.sispro.gov.co"
cnnstr_indicadores<-"Provider=MSOLAP;Data Source=cubos.sispro.gov.co;Password=u4_gu41n14;
Persist Security Info=True;
User ID=sispro.local\\UA_Guainia;
Initial Catalog=CU_Indicadores;
Data Source=cubos.sispro.gov.co"
cnnstr_Estadisticas_Vitales <-"Provider=MSOLAP;Data Source=cubos.sispro.gov.co;Password=u4_gu41n14;
Persist Security Info=True;
User ID=sispro.local\\UA_Guainia;
Initial Catalog=SGD_Registro_Estadisticas_Vitales;
Data Source=cubos.sispro.gov.co"
cnnstr_afiliados <-"Provider=MSOLAP;Data Source=cubos.sispro.gov.co;Password=u4_gu41n14;
Persist Security Info=True;
User ID=sispro.local\\UA_Guainia;
Initial Catalog=CU_Estadisticas Afiliados a Salud;
Data Source=cubos.sispro.gov.co"
olapCnn<-olapR::OlapConnection(cnnstr_rips)
# VAR_INTERES = 'Condiciones transmisibles y nutricionales' ### Looped variable
# EPS = "RES014"   ### Looped variable
# TYPE_USER = '1 - CONTRIBUTIVO'  ### Looped variable
packageList<-c("olapR", "foreign", "tidyverse", "haven","beepr", 'dplyr', 'readr', 'devtools')
olapR::explore(olapCnn)
